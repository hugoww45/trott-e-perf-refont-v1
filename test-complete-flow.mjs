#!/usr/bin/env node

/**
 * Script pour tester le flow complet de r√©initialisation
 * Usage: node test-complete-flow.mjs
 */

const BASE_URL = 'http://localhost:3000'

async function testCompleteFlow() {
  console.log('üöÄ Test du flow complet de r√©initialisation\n')

  // √âtape 1: Demander une r√©initialisation
  console.log('1Ô∏è‚É£ Envoi de la demande de r√©initialisation...')

  try {
    const resetResponse = await fetch(`${BASE_URL}/api/reset-request`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'test@example.com'
      })
    })

    const resetData = await resetResponse.json()

    if (!resetResponse.ok || !resetData.success) {
      console.log('‚ùå √âchec de l\'envoi:', resetData.error)
      return
    }

    console.log('‚úÖ Demande envoy√©e avec succ√®s')
    console.log('üìß Message:', resetData.message)

    // √âtape 2: Attendre un peu pour simuler le temps de lecture de l'email
    console.log('\n‚è≥ Simulation d\'un d√©lai...')
    await new Promise(resolve => setTimeout(resolve, 2000))

    // √âtape 3: Essayer une r√©initialisation avec un token fictif
    console.log('\n2Ô∏è‚É£ Test de r√©initialisation avec token fictif...')

    const passwordResponse = await fetch(`${BASE_URL}/api/reset-password`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        customerId: 'gid://shopify/Customer/123456',
        resetToken: 'token-fictif-pour-test',
        password: 'nouveaumotdepasse123'
      })
    })

    const passwordData = await passwordResponse.json()

    if (passwordResponse.ok) {
      console.log('‚ùå PROBL√àME: La r√©initialisation avec un token fictif a r√©ussi (ne devrait pas)')
    } else {
      console.log('‚úÖ Rejet correct du token fictif')
      console.log('üìù Erreur (attendue):', passwordData.error)
    }

    console.log('\nüìù Notes:')
    console.log('- Le token r√©el est g√©n√©r√© lors de l\'envoi de l\'email')
    console.log('- Regardez les logs du serveur pour voir le token g√©n√©r√©')
    console.log('- Pour tester vraiment, vous devrez copier le vrai token depuis les logs')

  } catch (error) {
    console.log('‚ùå Erreur r√©seau:', error.message)
  }
}

// Fonction pour tester avec un token r√©el (√† remplir manuellement)
async function testWithRealToken(token, customerId) {
  console.log('\nüîß Test avec token r√©el...')
  console.log('Token:', token.substring(0, 8) + '...')
  console.log('Customer ID:', customerId)

  try {
    const response = await fetch(`${BASE_URL}/api/reset-password`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        customerId,
        resetToken: token,
        password: 'nouveaumotdepasse123'
      })
    })

    const data = await response.json()

    if (response.ok && data.success) {
      console.log('‚úÖ R√©initialisation r√©ussie avec token r√©el')
      console.log('üéâ Message:', data.message)
    } else {
      console.log('‚ùå √âchec avec token r√©el:', data.error)
    }
  } catch (error) {
    console.log('‚ùå Erreur r√©seau:', error.message)
  }
}

// Ex√©cution
testCompleteFlow().then(() => {
  console.log('\nüí° Pour tester avec un vrai token:')
  console.log('1. Regardez les logs du serveur apr√®s avoir envoy√© un email')
  console.log('2. Copiez le token g√©n√©r√© et le customer ID')
  console.log('3. Ex√©cutez: testWithRealToken("token-complet", "customer-id")')
}).catch(console.error)
